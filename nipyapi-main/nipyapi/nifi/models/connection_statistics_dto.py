# coding: utf-8

"""
    NiFi Rest API

    The Rest API provides programmatic access to command and control a NiFi instance in real time. Start and                                             stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.

    OpenAPI spec version: 1.15.0
    Contact: dev@nifi.apache.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConnectionStatisticsDTO(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'stats_last_refreshed': 'str',
        'aggregate_snapshot': 'ConnectionStatisticsSnapshotDTO',
        'node_snapshots': 'list[NodeConnectionStatisticsSnapshotDTO]'
    }

    attribute_map = {
        'id': 'id',
        'stats_last_refreshed': 'statsLastRefreshed',
        'aggregate_snapshot': 'aggregateSnapshot',
        'node_snapshots': 'nodeSnapshots'
    }

    def __init__(self, id=None, stats_last_refreshed=None, aggregate_snapshot=None, node_snapshots=None):
        """
        ConnectionStatisticsDTO - a model defined in Swagger
        """

        self._id = None
        self._stats_last_refreshed = None
        self._aggregate_snapshot = None
        self._node_snapshots = None

        if id is not None:
          self.id = id
        if stats_last_refreshed is not None:
          self.stats_last_refreshed = stats_last_refreshed
        if aggregate_snapshot is not None:
          self.aggregate_snapshot = aggregate_snapshot
        if node_snapshots is not None:
          self.node_snapshots = node_snapshots

    @property
    def id(self):
        """
        Gets the id of this ConnectionStatisticsDTO.
        The ID of the connection

        :return: The id of this ConnectionStatisticsDTO.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ConnectionStatisticsDTO.
        The ID of the connection

        :param id: The id of this ConnectionStatisticsDTO.
        :type: str
        """

        self._id = id

    @property
    def stats_last_refreshed(self):
        """
        Gets the stats_last_refreshed of this ConnectionStatisticsDTO.
        The timestamp of when the stats were last refreshed

        :return: The stats_last_refreshed of this ConnectionStatisticsDTO.
        :rtype: str
        """
        return self._stats_last_refreshed

    @stats_last_refreshed.setter
    def stats_last_refreshed(self, stats_last_refreshed):
        """
        Sets the stats_last_refreshed of this ConnectionStatisticsDTO.
        The timestamp of when the stats were last refreshed

        :param stats_last_refreshed: The stats_last_refreshed of this ConnectionStatisticsDTO.
        :type: str
        """

        self._stats_last_refreshed = stats_last_refreshed

    @property
    def aggregate_snapshot(self):
        """
        Gets the aggregate_snapshot of this ConnectionStatisticsDTO.
        The status snapshot that represents the aggregate stats of the cluster

        :return: The aggregate_snapshot of this ConnectionStatisticsDTO.
        :rtype: ConnectionStatisticsSnapshotDTO
        """
        return self._aggregate_snapshot

    @aggregate_snapshot.setter
    def aggregate_snapshot(self, aggregate_snapshot):
        """
        Sets the aggregate_snapshot of this ConnectionStatisticsDTO.
        The status snapshot that represents the aggregate stats of the cluster

        :param aggregate_snapshot: The aggregate_snapshot of this ConnectionStatisticsDTO.
        :type: ConnectionStatisticsSnapshotDTO
        """

        self._aggregate_snapshot = aggregate_snapshot

    @property
    def node_snapshots(self):
        """
        Gets the node_snapshots of this ConnectionStatisticsDTO.
        A list of status snapshots for each node

        :return: The node_snapshots of this ConnectionStatisticsDTO.
        :rtype: list[NodeConnectionStatisticsSnapshotDTO]
        """
        return self._node_snapshots

    @node_snapshots.setter
    def node_snapshots(self, node_snapshots):
        """
        Sets the node_snapshots of this ConnectionStatisticsDTO.
        A list of status snapshots for each node

        :param node_snapshots: The node_snapshots of this ConnectionStatisticsDTO.
        :type: list[NodeConnectionStatisticsSnapshotDTO]
        """

        self._node_snapshots = node_snapshots

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConnectionStatisticsDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
