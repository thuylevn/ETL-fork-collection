{
  "swagger" : "2.0",
  "info" : {
    "description" : "The REST API provides an interface to a registry with operations for saving, versioning, reading NiFi flows and components.",
    "version" : "0.3.0",
    "title" : "NiFi Registry REST API",
    "contact" : {
      "name" : "Apache NiFi Registry",
      "url" : "https://nifi.apache.org",
      "email" : "dev@nifi.apache.org"
    },
    "license" : {
      "name" : "Apache 2.0 License",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath" : "/nifi-registry-api",
  "tags" : [ {
    "name" : "access",
    "description" : "Endpoints for obtaining an access token or checking access status."
  }, {
    "name" : "bucket_flows",
    "description" : "Create flows scoped to an existing bucket in the registry."
  }, {
    "name" : "buckets",
    "description" : "Create named buckets in the registry to store NiFi objects such flows and extensions. Search for and retrieve existing buckets."
  }, {
    "name" : "config",
    "description" : "Retrieves the configuration for this NiFi Registry."
  }, {
    "name" : "flows",
    "description" : "Gets metadata about flows."
  }, {
    "name" : "items",
    "description" : "Retrieve items across all buckets for which the user is authorized."
  }, {
    "name" : "policies",
    "description" : "Endpoint for managing access policies."
  }, {
    "name" : "tenants",
    "description" : "Endpoint for managing users and user groups."
  } ],
  "schemes" : [ "http", "https" ],
  "paths" : {
    "/access" : {
      "get" : {
        "tags" : [ "access" ],
        "summary" : "Returns the current client's authenticated identity and permissions to top-level resources",
        "description" : "",
        "operationId" : "getAccessStatus",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/currentUser"
            }
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry might be running unsecured."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ]
      }
    },
    "/access/token" : {
      "post" : {
        "tags" : [ "access" ],
        "summary" : "Creates a token for accessing the REST API via auto-detected method of verifying client identity claim credentials",
        "description" : "The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. The token can be used in the Authorization header in the format 'Authorization: Bearer <token>'.",
        "operationId" : "createAccessTokenByTryingAllProviders",
        "consumes" : [ "*/*" ],
        "produces" : [ "text/plain" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry may not be configured to support login with username/password."
          },
          "500" : {
            "description" : "NiFi Registry was unable to complete the request because an unexpected error occurred."
          }
        }
      }
    },
    "/access/token/identity-provider" : {
      "post" : {
        "tags" : [ "access" ],
        "summary" : "Creates a token for accessing the REST API via a custom identity provider.",
        "description" : "The user credentials must be passed in a format understood by the custom identity provider, e.g., a third-party auth token in an HTTP header. The exact format of the user credentials expected by the custom identity provider can be discovered by 'GET /access/token/identity-provider/usage'. The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. The token can be used in the Authorization header in the format 'Authorization: Bearer <token>'.",
        "operationId" : "createAccessTokenUsingIdentityProviderCredentials",
        "consumes" : [ "*/*" ],
        "produces" : [ "text/plain" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry may not be configured to support login with customized credentials."
          },
          "500" : {
            "description" : "NiFi Registry was unable to complete the request because an unexpected error occurred."
          }
        }
      }
    },
    "/access/token/identity-provider/test" : {
      "post" : {
        "tags" : [ "access" ],
        "summary" : "Tests the format of the credentials against this identity provider without preforming authentication on the credentials to validate them.",
        "description" : "The user credentials should be passed in a format understood by the custom identity provider as defined by 'GET /access/token/identity-provider/usage'.",
        "operationId" : "testIdentityProviderRecognizesCredentialsFormat",
        "consumes" : [ "*/*" ],
        "produces" : [ "text/plain" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "The format of the credentials were not recognized by the currently configured identity provider."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry may not be configured to support login with customized credentials."
          },
          "500" : {
            "description" : "NiFi Registry was unable to complete the request because an unexpected error occurred."
          }
        }
      }
    },
    "/access/token/identity-provider/usage" : {
      "get" : {
        "tags" : [ "access" ],
        "summary" : "Provides a description of how the currently configured identity provider expects credentials to be passed to POST /access/token/identity-provider",
        "description" : "",
        "operationId" : "getIdentityProviderUsageInstructions",
        "consumes" : [ "*/*" ],
        "produces" : [ "text/plain" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry may not be configured to support login with customized credentials."
          },
          "500" : {
            "description" : "NiFi Registry was unable to complete the request because an unexpected error occurred."
          }
        }
      }
    },
    "/access/token/kerberos" : {
      "post" : {
        "tags" : [ "access" ],
        "summary" : "Creates a token for accessing the REST API via Kerberos Service Tickets or SPNEGO Tokens (which includes Kerberos Service Tickets)",
        "description" : "The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. The token can be used in the Authorization header in the format 'Authorization: Bearer <token>'.",
        "operationId" : "createAccessTokenUsingKerberosTicket",
        "consumes" : [ "*/*" ],
        "produces" : [ "text/plain" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry may not be configured to support login Kerberos credentials."
          },
          "500" : {
            "description" : "NiFi Registry was unable to complete the request because an unexpected error occurred."
          }
        }
      }
    },
    "/access/token/login" : {
      "post" : {
        "tags" : [ "access" ],
        "summary" : "Creates a token for accessing the REST API via username/password",
        "description" : "The user credentials must be passed in standard HTTP Basic Auth format. That is: 'Authorization: Basic <credentials>', where <credentials> is the base64 encoded value of '<username>:<password>'. The token returned is formatted as a JSON Web Token (JWT). The token is base64 encoded and comprised of three parts. The header, the body, and the signature. The expiration of the token is a contained within the body. The token can be used in the Authorization header in the format 'Authorization: Bearer <token>'.",
        "operationId" : "createAccessTokenUsingBasicAuthCredentials",
        "consumes" : [ "*/*" ],
        "produces" : [ "text/plain" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry may not be configured to support login with username/password."
          },
          "500" : {
            "description" : "NiFi Registry was unable to complete the request because an unexpected error occurred."
          }
        },
        "security" : [ {
          "BasicAuth" : [ ]
        } ]
      }
    },
    "/buckets" : {
      "get" : {
        "tags" : [ "buckets" ],
        "summary" : "Gets all buckets",
        "description" : "The returned list will include only buckets for which the user is authorized.If the user is not authorized for any buckets, this returns an empty list.",
        "operationId" : "getBuckets",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/bucket"
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "buckets" ],
        "summary" : "Creates a bucket",
        "description" : "",
        "operationId" : "createBucket",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The bucket to create",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/bucket"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/bucket"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets",
          "action" : "write"
        }
      }
    },
    "/buckets/fields" : {
      "get" : {
        "tags" : [ "buckets" ],
        "summary" : "Retrieves field names for searching or sorting on buckets.",
        "description" : "",
        "operationId" : "getAvailableBucketFields",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Fields"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ]
      }
    },
    "/buckets/{bucketId}" : {
      "get" : {
        "tags" : [ "buckets" ],
        "summary" : "Gets a bucket",
        "description" : "",
        "operationId" : "getBucket",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/bucket"
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      },
      "put" : {
        "tags" : [ "buckets" ],
        "summary" : "Updates a bucket",
        "description" : "",
        "operationId" : "updateBucket",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The updated bucket",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/bucket"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/bucket"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "write"
        }
      },
      "delete" : {
        "tags" : [ "buckets" ],
        "summary" : "Deletes a bucket along with all objects stored in the bucket",
        "description" : "",
        "operationId" : "deleteBucket",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/bucket"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "delete"
        }
      }
    },
    "/buckets/{bucketId}/flows" : {
      "get" : {
        "tags" : [ "bucket_flows" ],
        "summary" : "Gets all flows in the given bucket",
        "description" : "",
        "operationId" : "getFlows",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/versionedFlow"
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      },
      "post" : {
        "tags" : [ "bucket_flows" ],
        "summary" : "Creates a flow",
        "description" : "The flow id is created by the server and populated in the returned entity.",
        "operationId" : "createFlow",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The details of the flow to create.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/versionedFlow"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/versionedFlow"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "write"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}" : {
      "get" : {
        "tags" : [ "bucket_flows" ],
        "summary" : "Gets a flow",
        "description" : "",
        "operationId" : "getFlow",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/versionedFlow"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      },
      "put" : {
        "tags" : [ "bucket_flows" ],
        "summary" : "Updates a flow",
        "description" : "",
        "operationId" : "updateFlow",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The updated flow",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/versionedFlow"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/versionedFlow"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "write"
        }
      },
      "delete" : {
        "tags" : [ "bucket_flows" ],
        "summary" : "Deletes a flow, including all saved versions of that flow.",
        "description" : "",
        "operationId" : "deleteFlow",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/versionedFlow"
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "delete"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}/diff/{versionA}/{versionB}" : {
      "get" : {
        "tags" : [ "bucket_flows" ],
        "summary" : "Returns a list of differences between 2 versions of a flow",
        "description" : "",
        "operationId" : "getFlowDiff",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "versionA",
          "in" : "path",
          "description" : "The first version number",
          "required" : true,
          "type" : "integer",
          "pattern" : "\\d+",
          "format" : "int32"
        }, {
          "name" : "versionB",
          "in" : "path",
          "description" : "The second version number",
          "required" : true,
          "type" : "integer",
          "pattern" : "\\d+",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/VersionedFlowDifference"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}/versions" : {
      "get" : {
        "tags" : [ "bucket_flows" ],
        "summary" : "Gets summary information for all versions of a flow. Versions are ordered newest->oldest.",
        "description" : "",
        "operationId" : "getFlowVersions",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/versionedFlowSnapshotMetadata"
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      },
      "post" : {
        "tags" : [ "bucket_flows" ],
        "summary" : "Creates the next version of a flow",
        "description" : "The version number of the object being created must be the next available version integer. Flow versions are immutable after they are created.",
        "operationId" : "createFlowVersion",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The new versioned flow snapshot.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/versionedFlowSnapshot"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/versionedFlowSnapshot"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "write"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}/versions/latest" : {
      "get" : {
        "tags" : [ "bucket_flows" ],
        "summary" : "Get the latest version of a flow",
        "description" : "",
        "operationId" : "getLatestFlowVersion",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/versionedFlowSnapshot"
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}/versions/latest/metadata" : {
      "get" : {
        "tags" : [ "bucket_flows" ],
        "summary" : "Get the metadata for the latest version of a flow",
        "description" : "",
        "operationId" : "getLatestFlowVersionMetadata",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/versionedFlowSnapshotMetadata"
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      }
    },
    "/buckets/{bucketId}/flows/{flowId}/versions/{versionNumber}" : {
      "get" : {
        "tags" : [ "bucket_flows" ],
        "summary" : "Gets the given version of a flow",
        "description" : "",
        "operationId" : "getFlowVersion",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "versionNumber",
          "in" : "path",
          "description" : "The version number",
          "required" : true,
          "type" : "integer",
          "pattern" : "\\d+",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/versionedFlowSnapshot"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      }
    },
    "/config" : {
      "get" : {
        "tags" : [ "config" ],
        "summary" : "Gets NiFi Registry configurations",
        "description" : "",
        "operationId" : "getConfiguration",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/registryConfiguration"
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/policies,/tenants",
          "action" : "read"
        }
      }
    },
    "/flows/fields" : {
      "get" : {
        "tags" : [ "flows" ],
        "summary" : "Retrieves the available field names that can be used for searching or sorting on flows.",
        "description" : "",
        "operationId" : "getAvailableFlowFields",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Fields"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ]
      }
    },
    "/flows/{flowId}" : {
      "get" : {
        "tags" : [ "flows" ],
        "summary" : "Gets a flow",
        "description" : "",
        "operationId" : "globalGetFlow",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/versionedFlow"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      }
    },
    "/flows/{flowId}/versions" : {
      "get" : {
        "tags" : [ "flows" ],
        "summary" : "Gets summary information for all versions of a flow. Versions are ordered newest->oldest.",
        "description" : "",
        "operationId" : "globalGetFlowVersions",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/versionedFlowSnapshotMetadata"
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      }
    },
    "/flows/{flowId}/versions/latest" : {
      "get" : {
        "tags" : [ "flows" ],
        "summary" : "Get the latest version of a flow",
        "description" : "",
        "operationId" : "globalGetLatestFlowVersion",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/versionedFlowSnapshot"
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      }
    },
    "/flows/{flowId}/versions/latest/metadata" : {
      "get" : {
        "tags" : [ "flows" ],
        "summary" : "Get the metadata for the latest version of a flow",
        "description" : "",
        "operationId" : "globalGetLatestFlowVersionMetadata",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/versionedFlowSnapshotMetadata"
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      }
    },
    "/flows/{flowId}/versions/{versionNumber}" : {
      "get" : {
        "tags" : [ "flows" ],
        "summary" : "Gets the given version of a flow",
        "description" : "",
        "operationId" : "globalGetFlowVersion",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "flowId",
          "in" : "path",
          "description" : "The flow identifier",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "versionNumber",
          "in" : "path",
          "description" : "The version number",
          "required" : true,
          "type" : "integer",
          "pattern" : "\\d+",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/versionedFlowSnapshot"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      }
    },
    "/items" : {
      "get" : {
        "tags" : [ "items" ],
        "summary" : "Get items across all buckets",
        "description" : "The returned items will include only items from buckets for which the user is authorized. If the user is not authorized to any buckets, an empty list will be returned.",
        "operationId" : "getItems",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/bucketItem"
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ]
      }
    },
    "/items/fields" : {
      "get" : {
        "tags" : [ "items" ],
        "summary" : "Retrieves the available field names for searching or sorting on bucket items.",
        "description" : "",
        "operationId" : "getAvailableBucketItemFields",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Fields"
            }
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ]
      }
    },
    "/items/{bucketId}" : {
      "get" : {
        "tags" : [ "items" ],
        "summary" : "Gets items of the given bucket",
        "description" : "",
        "operationId" : "getItemsInBucket",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "bucketId",
          "in" : "path",
          "description" : "The bucket identifier",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/bucketItem"
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/buckets/{bucketId}",
          "action" : "read"
        }
      }
    },
    "/policies" : {
      "get" : {
        "tags" : [ "policies" ],
        "summary" : "Gets all access policies",
        "description" : "",
        "operationId" : "getAccessPolicies",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/accessPolicy"
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/policies",
          "action" : "read"
        }
      },
      "post" : {
        "tags" : [ "policies" ],
        "summary" : "Creates an access policy",
        "description" : "",
        "operationId" : "createAccessPolicy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The access policy configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/accessPolicy"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/accessPolicy"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry might not be configured to use a ConfigurableAccessPolicyProvider."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/policies",
          "action" : "write"
        }
      }
    },
    "/policies/resources" : {
      "get" : {
        "tags" : [ "policies" ],
        "summary" : "Gets the available resources that support access/authorization policies",
        "description" : "",
        "operationId" : "getResources",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/resource"
              }
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/policies",
          "action" : "read"
        }
      }
    },
    "/policies/{action}/{resource}" : {
      "get" : {
        "tags" : [ "policies" ],
        "summary" : "Gets an access policy for the specified action and resource",
        "description" : "",
        "operationId" : "getAccessPolicyForResource",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "action",
          "in" : "path",
          "description" : "The request action.",
          "required" : true,
          "type" : "string",
          "enum" : [ "read", "write", "delete" ]
        }, {
          "name" : "resource",
          "in" : "path",
          "description" : "The resource of the policy.",
          "required" : true,
          "type" : "string",
          "pattern" : ".+"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/accessPolicy"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/policies",
          "action" : "read"
        }
      }
    },
    "/policies/{id}" : {
      "get" : {
        "tags" : [ "policies" ],
        "summary" : "Gets an access policy",
        "description" : "",
        "operationId" : "getAccessPolicy",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The access policy id.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/accessPolicy"
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/policies",
          "action" : "read"
        }
      },
      "put" : {
        "tags" : [ "policies" ],
        "summary" : "Updates a access policy",
        "description" : "",
        "operationId" : "updateAccessPolicy",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The access policy id.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The access policy configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/accessPolicy"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/accessPolicy"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry might not be configured to use a ConfigurableAccessPolicyProvider."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/policies",
          "action" : "write"
        }
      },
      "delete" : {
        "tags" : [ "policies" ],
        "summary" : "Deletes an access policy",
        "description" : "",
        "operationId" : "removeAccessPolicy",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The access policy id.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/accessPolicy"
            }
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid. The NiFi Registry might not be configured to use a ConfigurableAccessPolicyProvider."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/policies",
          "action" : "delete"
        }
      }
    },
    "/tenants/user-groups" : {
      "get" : {
        "tags" : [ "tenants" ],
        "summary" : "Gets all user groups",
        "description" : "Note: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getUserGroups",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/userGroup"
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/tenants",
          "action" : "read"
        }
      },
      "post" : {
        "tags" : [ "tenants" ],
        "summary" : "Creates a user group",
        "description" : "Note: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "createUserGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The user group configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/userGroup"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/userGroup"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/tenants",
          "action" : "write"
        }
      }
    },
    "/tenants/user-groups/{id}" : {
      "get" : {
        "tags" : [ "tenants" ],
        "summary" : "Gets a user group",
        "description" : "Note: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getUserGroup",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The user group id.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/userGroup"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/tenants",
          "action" : "read"
        }
      },
      "put" : {
        "tags" : [ "tenants" ],
        "summary" : "Updates a user group",
        "description" : "Note: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "updateUserGroup",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The user group id.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The user group configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/userGroup"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/userGroup"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/tenants",
          "action" : "write"
        }
      },
      "delete" : {
        "tags" : [ "tenants" ],
        "summary" : "Deletes a user group",
        "description" : "Note: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "removeUserGroup",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The user group id.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/userGroup"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/tenants",
          "action" : "delete"
        }
      }
    },
    "/tenants/users" : {
      "get" : {
        "tags" : [ "tenants" ],
        "summary" : "Gets all users",
        "description" : "Note: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getUsers",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/user"
              }
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/tenants",
          "action" : "read"
        }
      },
      "post" : {
        "tags" : [ "tenants" ],
        "summary" : "Creates a user",
        "description" : "Note: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "createUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "The user configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/user"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/user"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/tenants",
          "action" : "write"
        }
      }
    },
    "/tenants/users/{id}" : {
      "get" : {
        "tags" : [ "tenants" ],
        "summary" : "Gets a user",
        "description" : "Note: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "getUser",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The user id.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/user"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/tenants",
          "action" : "read"
        }
      },
      "put" : {
        "tags" : [ "tenants" ],
        "summary" : "Updates a user",
        "description" : "Note: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "updateUser",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The user id.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The user configuration details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/user"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/user"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/tenants",
          "action" : "write"
        }
      },
      "delete" : {
        "tags" : [ "tenants" ],
        "summary" : "Deletes a user",
        "description" : "Note: This endpoint is subject to change as NiFi Registry and its REST API evolve.",
        "operationId" : "removeUser",
        "consumes" : [ "*/*" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The user id.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/user"
            }
          },
          "400" : {
            "description" : "NiFi Registry was unable to complete the request because it was invalid. The request should not be retried without modification."
          },
          "401" : {
            "description" : "Client could not be authenticated."
          },
          "403" : {
            "description" : "Client is not authorized to make this request."
          },
          "404" : {
            "description" : "The specified resource could not be found."
          },
          "409" : {
            "description" : "NiFi Registry was unable to complete the request because it assumes a server state that is not valid."
          }
        },
        "security" : [ {
          "Authorization" : [ ]
        } ],
        "x-access-policy" : {
          "resource" : "/tenants",
          "action" : "delete"
        }
      }
    }
  },
  "securityDefinitions" : {
    "Authorization" : {
      "description" : "NiFi Registry Auth Token (JWT)",
      "type" : "apiKey",
      "name" : "Authorization",
      "in" : "header"
    },
    "BasicAuth" : {
      "description" : "HTTP Basic Auth",
      "type" : "basic"
    }
  },
  "definitions" : {
    "BatchSize" : {
      "type" : "object",
      "properties" : {
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Preferred number of flow files to include in a transaction."
        },
        "size" : {
          "type" : "string",
          "description" : "Preferred number of bytes to include in a transaction."
        },
        "duration" : {
          "type" : "string",
          "description" : "Preferred amount of time that a transaction should span."
        }
      }
    },
    "Bundle" : {
      "type" : "object",
      "properties" : {
        "group" : {
          "type" : "string",
          "description" : "The group of the bundle"
        },
        "artifact" : {
          "type" : "string",
          "description" : "The artifact of the bundle"
        },
        "version" : {
          "type" : "string",
          "description" : "The version of the bundle"
        }
      }
    },
    "ComponentDifference" : {
      "type" : "object",
      "properties" : {
        "valueA" : {
          "type" : "string",
          "description" : "The earlier value from the difference."
        },
        "valueB" : {
          "type" : "string",
          "description" : "The newer value from the difference."
        },
        "changeDescription" : {
          "type" : "string",
          "description" : "The description of the change."
        },
        "differenceType" : {
          "type" : "string",
          "description" : "The key to the difference."
        },
        "differenceTypeDescription" : {
          "type" : "string",
          "description" : "The description of the change type."
        }
      }
    },
    "ComponentDifferenceGroup" : {
      "type" : "object",
      "properties" : {
        "componentId" : {
          "type" : "string",
          "description" : "The id of the component whose changes are grouped together."
        },
        "componentName" : {
          "type" : "string",
          "description" : "The name of the component whose changes are grouped together."
        },
        "componentType" : {
          "type" : "string",
          "description" : "The type of component these changes relate to."
        },
        "processGroupId" : {
          "type" : "string",
          "description" : "The process group id for this component."
        },
        "differences" : {
          "type" : "array",
          "description" : "The list of changes related to this component between the 2 versions.",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/ComponentDifference"
          }
        }
      }
    },
    "ConnectableComponent" : {
      "type" : "object",
      "required" : [ "groupId", "id", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the connectable component."
        },
        "type" : {
          "type" : "string",
          "description" : "The type of component the connectable is.",
          "enum" : [ "PROCESSOR", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "INPUT_PORT", "OUTPUT_PORT", "FUNNEL" ]
        },
        "groupId" : {
          "type" : "string",
          "description" : "The id of the group that the connectable component resides in"
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the connectable component"
        },
        "comments" : {
          "type" : "string",
          "description" : "The comments for the connectable component."
        }
      }
    },
    "ControllerServiceAPI" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "The fully qualified name of the service interface."
        },
        "bundle" : {
          "description" : "The details of the artifact that bundled this service interface.",
          "$ref" : "#/definitions/Bundle"
        }
      }
    },
    "Fields" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Link" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "params" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "title" : {
          "type" : "string"
        },
        "uri" : {
          "type" : "string",
          "format" : "uri"
        },
        "uriBuilder" : {
          "$ref" : "#/definitions/UriBuilder"
        },
        "rel" : {
          "type" : "string"
        },
        "rels" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Position" : {
      "type" : "object",
      "properties" : {
        "x" : {
          "type" : "number",
          "format" : "double",
          "description" : "The x coordinate."
        },
        "y" : {
          "type" : "number",
          "format" : "double",
          "description" : "The y coordinate."
        }
      },
      "description" : "The position of a component on the graph"
    },
    "UriBuilder" : {
      "type" : "object"
    },
    "VersionedConnection" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "source" : {
          "description" : "The source of the connection.",
          "$ref" : "#/definitions/ConnectableComponent"
        },
        "destination" : {
          "description" : "The destination of the connection.",
          "$ref" : "#/definitions/ConnectableComponent"
        },
        "labelIndex" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The index of the bend point where to place the connection label."
        },
        "zIndex" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The z index of the connection."
        },
        "selectedRelationships" : {
          "type" : "array",
          "description" : "The selected relationship that comprise the connection.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "backPressureObjectThreshold" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The object count threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won't impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue."
        },
        "backPressureDataSizeThreshold" : {
          "type" : "string",
          "description" : "The object data size threshold for determining when back pressure is applied. Updating this value is a passive change in the sense that it won't impact whether existing files over the limit are affected but it does help feeder processors to stop pushing too much into this work queue."
        },
        "flowFileExpiration" : {
          "type" : "string",
          "description" : "The amount of time a flow file may be in the flow before it will be automatically aged out of the flow. Once a flow file reaches this age it will be terminated from the flow the next time a processor attempts to start work on it."
        },
        "prioritizers" : {
          "type" : "array",
          "description" : "The comparators used to prioritize the queue.",
          "items" : {
            "type" : "string"
          }
        },
        "bends" : {
          "type" : "array",
          "description" : "The bend points on the connection.",
          "items" : {
            "$ref" : "#/definitions/Position"
          }
        },
        "loadBalanceStrategy" : {
          "type" : "string",
          "description" : "The Strategy to use for load balancing data across the cluster, or null, if no Load Balance Strategy has been specified.",
          "enum" : [ "DO_NOT_LOAD_BALANCE", "PARTITION_BY_ATTRIBUTE", "ROUND_ROBIN", "SINGLE_NODE" ]
        },
        "partitioningAttribute" : {
          "type" : "string",
          "description" : "The attribute to use for partitioning data as it is load balanced across the cluster. If the Load Balance Strategy is configured to use PARTITION_BY_ATTRIBUTE, the value returned by this method is the name of the FlowFile Attribute that will be used to determine which node in the cluster should receive a given FlowFile. If the Load Balance Strategy is unset or is set to any other value, the Partitioning Attribute has no effect."
        },
        "loadBalanceCompression" : {
          "type" : "string",
          "description" : "Whether or not compression should be used when transferring FlowFiles between nodes",
          "enum" : [ "DO_NOT_COMPRESS", "COMPRESS_ATTRIBUTES_ONLY", "COMPRESS_ATTRIBUTES_AND_CONTENT" ]
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedControllerService" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the controller service."
        },
        "bundle" : {
          "description" : "The details of the artifact that bundled this processor type.",
          "$ref" : "#/definitions/Bundle"
        },
        "controllerServiceApis" : {
          "type" : "array",
          "description" : "Lists the APIs this Controller Service implements.",
          "items" : {
            "$ref" : "#/definitions/ControllerServiceAPI"
          }
        },
        "properties" : {
          "type" : "object",
          "description" : "The properties of the controller service.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "propertyDescriptors" : {
          "type" : "object",
          "description" : "The property descriptors for the processor.",
          "additionalProperties" : {
            "$ref" : "#/definitions/VersionedPropertyDescriptor"
          }
        },
        "annotationData" : {
          "type" : "string",
          "description" : "The annotation for the controller service. This is how the custom UI relays configuration to the controller service."
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedFlowCoordinates" : {
      "type" : "object",
      "properties" : {
        "registryUrl" : {
          "type" : "string",
          "description" : "The URL of the Flow Registry that contains the flow"
        },
        "bucketId" : {
          "type" : "string",
          "description" : "The UUID of the bucket that the flow resides in"
        },
        "flowId" : {
          "type" : "string",
          "description" : "The UUID of the flow"
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The version of the flow"
        },
        "latest" : {
          "type" : "boolean",
          "description" : "Whether or not these coordinates point to the latest version of the flow"
        }
      }
    },
    "VersionedFlowDifference" : {
      "type" : "object",
      "properties" : {
        "bucketId" : {
          "type" : "string",
          "description" : "The id of the bucket that the flow is stored in."
        },
        "flowId" : {
          "type" : "string",
          "description" : "The id of the flow that is being examined."
        },
        "versionA" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The earlier version from the diff operation."
        },
        "versionB" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The latter version from the diff operation."
        },
        "componentDifferenceGroups" : {
          "type" : "array",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/ComponentDifferenceGroup"
          }
        }
      }
    },
    "VersionedFunnel" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedLabel" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "label" : {
          "type" : "string",
          "description" : "The text that appears in the label."
        },
        "width" : {
          "type" : "number",
          "format" : "double",
          "description" : "The width of the label in pixels when at a 1:1 scale."
        },
        "height" : {
          "type" : "number",
          "format" : "double",
          "description" : "The height of the label in pixels when at a 1:1 scale."
        },
        "style" : {
          "type" : "object",
          "description" : "The styles for this label (font-size : 12px, background-color : #eee, etc).",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedPort" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of port.",
          "enum" : [ "INPUT_PORT", "OUTPUT_PORT" ]
        },
        "concurrentlySchedulableTaskCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of tasks that should be concurrently scheduled for the port."
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedProcessGroup" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "processGroups" : {
          "type" : "array",
          "description" : "The child Process Groups",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedProcessGroup"
          }
        },
        "remoteProcessGroups" : {
          "type" : "array",
          "description" : "The Remote Process Groups",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedRemoteProcessGroup"
          }
        },
        "processors" : {
          "type" : "array",
          "description" : "The Processors",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedProcessor"
          }
        },
        "inputPorts" : {
          "type" : "array",
          "description" : "The Input Ports",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedPort"
          }
        },
        "outputPorts" : {
          "type" : "array",
          "description" : "The Output Ports",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedPort"
          }
        },
        "connections" : {
          "type" : "array",
          "description" : "The Connections",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedConnection"
          }
        },
        "labels" : {
          "type" : "array",
          "description" : "The Labels",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedLabel"
          }
        },
        "funnels" : {
          "type" : "array",
          "description" : "The Funnels",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedFunnel"
          }
        },
        "controllerServices" : {
          "type" : "array",
          "description" : "The Controller Services",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedControllerService"
          }
        },
        "versionedFlowCoordinates" : {
          "description" : "The coordinates where the remote flow is stored, or null if the Process Group is not directly under Version Control",
          "$ref" : "#/definitions/VersionedFlowCoordinates"
        },
        "variables" : {
          "type" : "object",
          "description" : "The Variables in the Variable Registry for this Process Group (not including any ancestor or descendant Process Groups)",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedProcessor" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "bundle" : {
          "description" : "Information about the bundle from which the component came",
          "$ref" : "#/definitions/Bundle"
        },
        "style" : {
          "type" : "object",
          "description" : "Stylistic data for rendering in a UI",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "type" : {
          "type" : "string",
          "description" : "The type of Processor"
        },
        "properties" : {
          "type" : "object",
          "description" : "The properties for the processor. Properties whose value is not set will only contain the property name.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "propertyDescriptors" : {
          "type" : "object",
          "description" : "The property descriptors for the processor.",
          "additionalProperties" : {
            "$ref" : "#/definitions/VersionedPropertyDescriptor"
          }
        },
        "annotationData" : {
          "type" : "string",
          "description" : "The annotation data for the processor used to relay configuration between a custom UI and the procesosr."
        },
        "schedulingPeriod" : {
          "type" : "string",
          "description" : "The frequency with which to schedule the processor. The format of the value will depend on th value of schedulingStrategy."
        },
        "schedulingStrategy" : {
          "type" : "string",
          "description" : "Indcates whether the prcessor should be scheduled to run in event or timer driven mode."
        },
        "executionNode" : {
          "type" : "string",
          "description" : "Indicates the node where the process will execute."
        },
        "penaltyDuration" : {
          "type" : "string",
          "description" : "The amout of time that is used when the process penalizes a flowfile."
        },
        "yieldDuration" : {
          "type" : "string",
          "description" : "The amount of time that must elapse before this processor is scheduled again after yielding."
        },
        "bulletinLevel" : {
          "type" : "string",
          "description" : "The level at which the processor will report bulletins."
        },
        "runDurationMillis" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The run duration for the processor in milliseconds."
        },
        "concurrentlySchedulableTaskCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of tasks that should be concurrently schedule for the processor. If the processor doesn't allow parallol processing then any positive input will be ignored."
        },
        "autoTerminatedRelationships" : {
          "type" : "array",
          "description" : "The names of all relationships that cause a flow file to be terminated if the relationship is not connected elsewhere. This property differs from the 'isAutoTerminate' property of the RelationshipDTO in that the RelationshipDTO is meant to depict the current configuration, whereas this property can be set in a DTO when updating a Processor in order to change which Relationships should be auto-terminated.",
          "uniqueItems" : true,
          "items" : {
            "type" : "string"
          }
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedPropertyDescriptor" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the property"
        },
        "displayName" : {
          "type" : "string",
          "description" : "The display name of the property"
        },
        "identifiesControllerService" : {
          "type" : "boolean",
          "description" : "Whether or not the property provides the identifier of a Controller Service"
        },
        "sensitive" : {
          "type" : "boolean",
          "description" : "Whether or not the property is considered sensitive"
        }
      }
    },
    "VersionedRemoteGroupPort" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "remoteGroupId" : {
          "type" : "string",
          "description" : "The id of the remote process group that the port resides in."
        },
        "concurrentlySchedulableTaskCount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of task that may transmit flowfiles to the target port concurrently."
        },
        "useCompression" : {
          "type" : "boolean",
          "description" : "Whether the flowfiles are compressed when sent to the target port."
        },
        "batchSize" : {
          "description" : "The batch settings for data transmission.",
          "$ref" : "#/definitions/BatchSize"
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "targetId" : {
          "type" : "string",
          "description" : "The ID of the port on the target NiFi instance"
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "VersionedRemoteProcessGroup" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The component's unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "The component's name"
        },
        "comments" : {
          "type" : "string",
          "description" : "The user-supplied comments for the component"
        },
        "position" : {
          "description" : "The component's position on the graph",
          "$ref" : "#/definitions/Position"
        },
        "targetUri" : {
          "type" : "string",
          "description" : "[DEPRECATED] The target URI of the remote process group. If target uri is not set, but uris are set, then returns the first uri in the uris. If neither target uri nor uris are set, then returns null."
        },
        "targetUris" : {
          "type" : "string",
          "description" : "The target URIs of the remote process group. If target uris is not set but target uri is set, then returns the single target uri. If neither target uris nor target uri is set, then returns null."
        },
        "communicationsTimeout" : {
          "type" : "string",
          "description" : "The time period used for the timeout when communicating with the target."
        },
        "yieldDuration" : {
          "type" : "string",
          "description" : "When yielding, this amount of time must elapse before the remote process group is scheduled again."
        },
        "transportProtocol" : {
          "type" : "string",
          "description" : "The Transport Protocol that is used for Site-to-Site communications",
          "enum" : [ "RAW", "HTTP" ]
        },
        "localNetworkInterface" : {
          "type" : "string",
          "description" : "The local network interface to send/receive data. If not specified, any local address is used. If clustered, all nodes must have an interface with this identifier."
        },
        "proxyHost" : {
          "type" : "string"
        },
        "proxyPort" : {
          "type" : "integer",
          "format" : "int32"
        },
        "proxyUser" : {
          "type" : "string"
        },
        "inputPorts" : {
          "type" : "array",
          "description" : "A Set of Input Ports that can be connected to, in order to send data to the remote NiFi instance",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedRemoteGroupPort"
          }
        },
        "outputPorts" : {
          "type" : "array",
          "description" : "A Set of Output Ports that can be connected to, in order to pull data from the remote NiFi instance",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/VersionedRemoteGroupPort"
          }
        },
        "componentType" : {
          "type" : "string",
          "enum" : [ "CONNECTION", "PROCESSOR", "PROCESS_GROUP", "REMOTE_PROCESS_GROUP", "INPUT_PORT", "OUTPUT_PORT", "REMOTE_INPUT_PORT", "REMOTE_OUTPUT_PORT", "FUNNEL", "LABEL", "CONTROLLER_SERVICE" ]
        },
        "groupIdentifier" : {
          "type" : "string",
          "description" : "The ID of the Process Group that this component belongs to"
        }
      }
    },
    "accessPolicy" : {
      "type" : "object",
      "required" : [ "action", "resource" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The id of the policy. Set by server at creation time.",
          "readOnly" : true
        },
        "resource" : {
          "type" : "string",
          "description" : "The resource for this access policy."
        },
        "action" : {
          "type" : "string",
          "description" : "The action associated with this access policy.",
          "enum" : [ "read", "write", "delete" ]
        },
        "configurable" : {
          "type" : "boolean",
          "description" : "Indicates if this access policy is configurable, based on which Authorizer has been configured to manage it.",
          "readOnly" : true
        },
        "users" : {
          "type" : "array",
          "description" : "The set of user IDs associated with this access policy.",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/tenant"
          }
        },
        "userGroups" : {
          "type" : "array",
          "description" : "The set of user group IDs associated with this access policy.",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/tenant"
          }
        }
      }
    },
    "accessPolicySummary" : {
      "type" : "object",
      "required" : [ "action", "resource" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The id of the policy. Set by server at creation time.",
          "readOnly" : true
        },
        "resource" : {
          "type" : "string",
          "description" : "The resource for this access policy."
        },
        "action" : {
          "type" : "string",
          "description" : "The action associated with this access policy.",
          "enum" : [ "read", "write", "delete" ]
        },
        "configurable" : {
          "type" : "boolean",
          "description" : "Indicates if this access policy is configurable, based on which Authorizer has been configured to manage it.",
          "readOnly" : true
        }
      }
    },
    "bucket" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "link" : {
          "description" : "An WebLink to this entity.",
          "readOnly" : true,
          "$ref" : "#/definitions/Link"
        },
        "identifier" : {
          "type" : "string",
          "description" : "An ID to uniquely identify this object.",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the bucket."
        },
        "createdTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp of when the bucket was first created. This is set by the server at creation time.",
          "readOnly" : true,
          "minimum" : 1
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the bucket."
        },
        "permissions" : {
          "description" : "The access that the current user has to this bucket.",
          "readOnly" : true,
          "$ref" : "#/definitions/permissions"
        }
      }
    },
    "bucketItem" : {
      "type" : "object",
      "required" : [ "bucketIdentifier", "name", "type" ],
      "properties" : {
        "link" : {
          "description" : "An WebLink to this entity.",
          "readOnly" : true,
          "$ref" : "#/definitions/Link"
        },
        "identifier" : {
          "type" : "string",
          "description" : "An ID to uniquely identify this object.",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the item."
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the item."
        },
        "bucketIdentifier" : {
          "type" : "string",
          "description" : "The identifier of the bucket this items belongs to. This cannot be changed after the item is created."
        },
        "bucketName" : {
          "type" : "string",
          "description" : "The name of the bucket this items belongs to.",
          "readOnly" : true
        },
        "createdTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp of when the item was created, as milliseconds since epoch.",
          "readOnly" : true,
          "minimum" : 1
        },
        "modifiedTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp of when the item was last modified, as milliseconds since epoch.",
          "readOnly" : true,
          "minimum" : 1
        },
        "type" : {
          "type" : "string",
          "description" : "The type of item.",
          "enum" : [ "Flow" ]
        },
        "permissions" : {
          "description" : "The access that the current user has to the bucket containing this item.",
          "readOnly" : true,
          "$ref" : "#/definitions/permissions"
        }
      }
    },
    "currentUser" : {
      "type" : "object",
      "properties" : {
        "identity" : {
          "type" : "string",
          "description" : "The identity of the current user",
          "readOnly" : true
        },
        "anonymous" : {
          "type" : "boolean",
          "description" : "Indicates if the current user is anonymous",
          "readOnly" : true
        },
        "resourcePermissions" : {
          "description" : "The access that the current user has to top level resources",
          "readOnly" : true,
          "$ref" : "#/definitions/resourcePermissions"
        }
      }
    },
    "permissions" : {
      "type" : "object",
      "properties" : {
        "canRead" : {
          "type" : "boolean",
          "description" : "Indicates whether the user can read a given resource.",
          "readOnly" : true
        },
        "canWrite" : {
          "type" : "boolean",
          "description" : "Indicates whether the user can write a given resource.",
          "readOnly" : true
        },
        "canDelete" : {
          "type" : "boolean",
          "description" : "Indicates whether the user can delete a given resource.",
          "readOnly" : true
        }
      }
    },
    "registryConfiguration" : {
      "type" : "object",
      "properties" : {
        "supportsManagedAuthorizer" : {
          "type" : "boolean",
          "description" : "Whether this NiFi Registry supports a managed authorizer. Managed authorizers can visualize users, groups, and policies in the UI.",
          "readOnly" : true
        },
        "supportsConfigurableAuthorizer" : {
          "type" : "boolean",
          "description" : "Whether this NiFi Registry supports a configurable authorizer.",
          "readOnly" : true
        },
        "supportsConfigurableUsersAndGroups" : {
          "type" : "boolean",
          "description" : "Whether this NiFi Registry supports configurable users and groups.",
          "readOnly" : true
        }
      }
    },
    "resource" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The identifier of the resource.",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the resource.",
          "readOnly" : true
        }
      }
    },
    "resourcePermissions" : {
      "type" : "object",
      "properties" : {
        "buckets" : {
          "description" : "The access that the current user has to the top level /buckets resource of this NiFi Registry (i.e., access to all buckets)",
          "readOnly" : true,
          "$ref" : "#/definitions/permissions"
        },
        "tenants" : {
          "description" : "The access that the current user has to the top level /tenants resource of this NiFi Registry",
          "readOnly" : true,
          "$ref" : "#/definitions/permissions"
        },
        "policies" : {
          "description" : "The access that the current user has to the top level /policies resource of this NiFi Registry",
          "readOnly" : true,
          "$ref" : "#/definitions/permissions"
        },
        "proxy" : {
          "description" : "The access that the current user has to the top level /proxy resource of this NiFi Registry",
          "readOnly" : true,
          "$ref" : "#/definitions/permissions"
        },
        "anyTopLevelResource" : {
          "description" : "The access that the current user has to any top level resources (a logical 'OR' of all other values)",
          "readOnly" : true,
          "$ref" : "#/definitions/permissions"
        }
      }
    },
    "tenant" : {
      "type" : "object",
      "required" : [ "identity" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The computer-generated identifier of the tenant.",
          "readOnly" : true
        },
        "identity" : {
          "type" : "string",
          "description" : "The human-facing identity of the tenant. This can only be changed if the tenant is configurable."
        },
        "configurable" : {
          "type" : "boolean",
          "description" : "Indicates if this tenant is configurable, based on which UserGroupProvider has been configured to manage it.",
          "readOnly" : true
        },
        "resourcePermissions" : {
          "description" : "A summary top-level resource access policies granted to this tenant.",
          "readOnly" : true,
          "$ref" : "#/definitions/resourcePermissions"
        },
        "accessPolicies" : {
          "type" : "array",
          "description" : "The access policies granted to this tenant.",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/accessPolicySummary"
          }
        }
      }
    },
    "user" : {
      "type" : "object",
      "required" : [ "identity" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The computer-generated identifier of the tenant.",
          "readOnly" : true
        },
        "identity" : {
          "type" : "string",
          "description" : "The human-facing identity of the tenant. This can only be changed if the tenant is configurable."
        },
        "configurable" : {
          "type" : "boolean",
          "description" : "Indicates if this tenant is configurable, based on which UserGroupProvider has been configured to manage it.",
          "readOnly" : true
        },
        "resourcePermissions" : {
          "description" : "A summary top-level resource access policies granted to this tenant.",
          "readOnly" : true,
          "$ref" : "#/definitions/resourcePermissions"
        },
        "accessPolicies" : {
          "type" : "array",
          "description" : "The access policies granted to this tenant.",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/accessPolicySummary"
          }
        },
        "userGroups" : {
          "type" : "array",
          "description" : "The groups to which the user belongs.",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/tenant"
          }
        }
      }
    },
    "userGroup" : {
      "type" : "object",
      "required" : [ "identity" ],
      "properties" : {
        "identifier" : {
          "type" : "string",
          "description" : "The computer-generated identifier of the tenant.",
          "readOnly" : true
        },
        "identity" : {
          "type" : "string",
          "description" : "The human-facing identity of the tenant. This can only be changed if the tenant is configurable."
        },
        "configurable" : {
          "type" : "boolean",
          "description" : "Indicates if this tenant is configurable, based on which UserGroupProvider has been configured to manage it.",
          "readOnly" : true
        },
        "resourcePermissions" : {
          "description" : "A summary top-level resource access policies granted to this tenant.",
          "readOnly" : true,
          "$ref" : "#/definitions/resourcePermissions"
        },
        "accessPolicies" : {
          "type" : "array",
          "description" : "The access policies granted to this tenant.",
          "readOnly" : true,
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/accessPolicySummary"
          }
        },
        "users" : {
          "type" : "array",
          "description" : "The users that belong to this user group. This can only be changed if this group is configurable.",
          "uniqueItems" : true,
          "items" : {
            "$ref" : "#/definitions/tenant"
          }
        }
      }
    },
    "versionedFlow" : {
      "type" : "object",
      "required" : [ "bucketIdentifier", "name", "type" ],
      "properties" : {
        "link" : {
          "description" : "An WebLink to this entity.",
          "readOnly" : true,
          "$ref" : "#/definitions/Link"
        },
        "identifier" : {
          "type" : "string",
          "description" : "An ID to uniquely identify this object.",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the item."
        },
        "description" : {
          "type" : "string",
          "description" : "A description of the item."
        },
        "bucketIdentifier" : {
          "type" : "string",
          "description" : "The identifier of the bucket this items belongs to. This cannot be changed after the item is created."
        },
        "bucketName" : {
          "type" : "string",
          "description" : "The name of the bucket this items belongs to.",
          "readOnly" : true
        },
        "createdTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp of when the item was created, as milliseconds since epoch.",
          "readOnly" : true,
          "minimum" : 1
        },
        "modifiedTimestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp of when the item was last modified, as milliseconds since epoch.",
          "readOnly" : true,
          "minimum" : 1
        },
        "type" : {
          "type" : "string",
          "description" : "The type of item.",
          "enum" : [ "Flow" ]
        },
        "permissions" : {
          "description" : "The access that the current user has to the bucket containing this item.",
          "readOnly" : true,
          "$ref" : "#/definitions/permissions"
        },
        "versionCount" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The number of versions of this flow.",
          "readOnly" : true,
          "minimum" : 0
        }
      }
    },
    "versionedFlowSnapshot" : {
      "type" : "object",
      "required" : [ "flowContents", "snapshotMetadata" ],
      "properties" : {
        "snapshotMetadata" : {
          "description" : "The metadata for this snapshot",
          "$ref" : "#/definitions/versionedFlowSnapshotMetadata"
        },
        "flowContents" : {
          "description" : "The contents of the versioned flow",
          "$ref" : "#/definitions/VersionedProcessGroup"
        },
        "flow" : {
          "description" : "The flow this snapshot is for",
          "readOnly" : true,
          "$ref" : "#/definitions/versionedFlow"
        },
        "bucket" : {
          "description" : "The bucket where the flow is located",
          "readOnly" : true,
          "$ref" : "#/definitions/bucket"
        },
        "latest" : {
          "type" : "boolean"
        }
      }
    },
    "versionedFlowSnapshotMetadata" : {
      "type" : "object",
      "required" : [ "bucketIdentifier", "flowIdentifier", "version" ],
      "properties" : {
        "link" : {
          "description" : "An WebLink to this entity.",
          "readOnly" : true,
          "$ref" : "#/definitions/Link"
        },
        "bucketIdentifier" : {
          "type" : "string",
          "description" : "The identifier of the bucket this snapshot belongs to."
        },
        "flowIdentifier" : {
          "type" : "string",
          "description" : "The identifier of the flow this snapshot belongs to."
        },
        "version" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The version of this snapshot of the flow.",
          "minimum" : 1
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The timestamp when the flow was saved, as milliseconds since epoch.",
          "readOnly" : true,
          "minimum" : 1
        },
        "author" : {
          "type" : "string",
          "description" : "The user that created this snapshot of the flow.",
          "readOnly" : true
        },
        "comments" : {
          "type" : "string",
          "description" : "The comments provided by the user when creating the snapshot."
        }
      }
    }
  }
}